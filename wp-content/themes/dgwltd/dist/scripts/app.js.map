{"version":3,"file":"app.js","sources":["src/scripts/app.js"],"sourcesContent":["//Import ES6 dependencies - per ES6 imports, we can omit the `.js` at the end.\n// import { cookies } from './modules/cookies';\n\n;(function () {\n\n    'use strict';\n\n    /**\n     * Get the value of a cookie\n     * Source: https://gist.github.com/wpsmith/6cf23551dd140fb72ae7\n     * @param  {String} name  The name of the cookie\n     * @return {String}       The cookie value\n     */\n    var getCookie = function (name) {\n        var value = \"; \" + document.cookie;\n        var parts = value.split(\"; \" + name + \"=\");\n        if (parts.length == 2) return parts.pop().split(\";\").shift();\n    };\n\n    /*!\n    * Get the contrasting color for any hex color\n    * (c) 2019 Chris Ferdinandi, MIT License, https://gomakethings.com\n    * Derived from work by Brian Suda, https://24ways.org/2010/calculating-color-contrast/\n    * @param  {String} A hexcolor value\n    * @return {String} The contrasting color (black or white)\n    */\n    let getContrast = function (hexcolor){\n\n        // If a leading # is provided, remove it\n        if (hexcolor.slice(0, 1) === '#') {\n            hexcolor = hexcolor.slice(1);\n        }\n\n        // If a three-character hexcode, make six-character\n        if (hexcolor.length === 3) {\n            hexcolor = hexcolor.split('').map(function (hex) {\n                return hex + hex;\n            }).join('');\n        }\n\n        // Convert to RGB value\n        var r = parseInt(hexcolor.substr(0,2),16);\n        var g = parseInt(hexcolor.substr(2,2),16);\n        var b = parseInt(hexcolor.substr(4,2),16);\n\n        // Get YIQ ratio\n        var yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;\n\n        // Check contrast\n        return (yiq >= 128) ? 'black' : 'white';\n\n    };\n\n    //Convert RGB to HEX\n    let rgb2hex  = function (rgb) {\n\n        rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n        function hex(x) {\n            return (\"0\" + parseInt(x).toString(16)).slice(-2);\n        }\n        return  hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\n\n    }\n\n    //Cookies\n    const cookieBanner = ()=>{\n\n        // Cookie vars\n        let cookieBanner = document.getElementById('cookieBanner');\n        let cookieNotice = document.getElementById('cookieNotice');\n        let cookieButtons = document.querySelectorAll('#cookieNotice button');\n        let hideButtons = document.querySelectorAll('#cookieBanner .hide-banner');\n        let cookieAccept = document.getElementById('cookieAccept');\n        let cookieReject = document.getElementById('cookieReject');\n\n        if (!cookieNotice) return;\n\n        //If JS enabled then show the notice - falls back to noscipt if not present\n        // cookieNotice.classList.add('open');\n        cookieBanner.hidden = false;\n\n        //If no buttons bail\n        if (!cookieButtons) return;\n\n        //Get timestamp of one year into the future\n        var date = new Date();\n        date.setTime(date.getTime() + 365 * 24 * 60 * 60 * 1000);\n\n        // Set the cookies\n        cookieButtons.forEach(button => {\n            button.addEventListener('click', event => {\n                document.cookie = 'dgwltd_cookies_preferences_set=true; expires=' + date.toUTCString() + '; path=/';    \n                cookieNotice.hidden = true;\n            })\n        })\n\n        hideButtons.forEach(button => {\n            button.addEventListener('click', event => {\n                cookieBanner.hidden = true;\n            })\n        })\n\n        //If user accepts additional cookies let's set that as true\n        cookieAccept.addEventListener('click', event => {\n            let currentConsentCookieVars = { \"essential\": true, \"functional\": true, \"performance\": true, \"advertising\": true };\n            document.cookie = 'dgwltd_cookies_policy=' + JSON.stringify(currentConsentCookieVars) + '; expires=' + date.toUTCString() + '; path=/';    \n            document.getElementById('messageAccept').hidden = false;\n        })\n\n        cookieReject.addEventListener('click', event => {\n            let currentConsentCookieVars = { \"essential\": true, \"functional\": false, \"performance\": false, \"advertising\": false };\n            document.cookie = 'dgwltd_cookies_policy=' + JSON.stringify(currentConsentCookieVars) + '; expires=' + date.toUTCString() + '; path=/';    \n            document.getElementById('messageReject').hidden = false;\n        })\n\n        //Remove notice if cookie is set\n        if(cookieNotice && getCookie('dgwltd_cookies_preferences_set')) {\n            cookieBanner.hidden = true;\n        }\n\n    };\n\n    const cookieSettingsPage = ()=>{\n\n        //Get the default settings, this should already have been set in cookie.js\n        let currentConsentCookie = getCookie('dgwltd_cookies_policy');\n\n        if(!currentConsentCookie) return;\n\n        //Get the cookie settings\n        let currentConsentCookieJSON = JSON.parse(currentConsentCookie); \n\n        // We don't need the essential value as this cannot be changed by the user\n        delete currentConsentCookieJSON.essential\n        \n        //Check for the form\n        let cookieForm = document.getElementById('cookies_form');\n\n        //If no form bail\n        if (!cookieForm) return;\n            \n        for (var cookieType in currentConsentCookieJSON) {\n            var radioButton\n\n            // console.log(cookieType + ' is ' + currentConsentCookieJSON[cookieType]);\n    \n            if (currentConsentCookieJSON[cookieType]) {\n            radioButton = document.querySelector('input[name=cookies-' + cookieType + '][value=yes]')\n            } else {\n            radioButton = document.querySelector('input[name=cookies-' + cookieType + '][value=no]')\n            }\n    \n            radioButton.checked = true\n        }\n\n    };\n\n    const cookieScriptsEnable = ()=>{\n        \n        // JavaScript Type Re-Writing\n        // https://help.termly.io/support/solutions/articles/60000666992-blocking-javascript-third-party-cookies-manually\n        // <script type=\"text/plain\" data-categories=\"performance\" src=\"xxxxxxxxx.js\"></script>\n\t    // <script type=\"text/plain\" data-categories=\"functional\" src=\"xxxxxxxxx.js\"></script>\t\n        // <iframe width=\"560\" height=\"315\" data-src=\"https://www.youtube.com/embed/xxxxxxxxx\" data-categories=\"advertising\" frameborder=\"0\" allowfullscreen></iframe>\n\n        //Get the cookie settings\n        let currentConsentCookie = getCookie('dgwltd_cookies_policy');\n        if(!currentConsentCookie) return;\n\n        let currentConsentCookieJSON = JSON.parse(currentConsentCookie); \n        //remove essential \n        delete currentConsentCookieJSON.essential\n\n        //Get all the scripts\n        let scripts = document.querySelectorAll('script[data-categories]');\n        let iframes = document.querySelectorAll('iframe[data-categories]');\n        // console.log(scripts);\n\n        //JavaScript Type Re-Writing\n        for (var cookieType in currentConsentCookieJSON) {\n            \n            // console.log(cookieType);\n\n            Array.prototype.forEach.call(scripts, function(script) {\n                let category = script.dataset.categories;\n                //If true\n                if (currentConsentCookieJSON[cookieType]) {\n                    if(category === cookieType) {\n                        //Set the MIME type\n                        script.setAttribute('type', 'text/javascript'); \n                    }\n                }\n            })\n\n            Array.prototype.forEach.call(iframes, function(iframe) {\n                let category = iframe.dataset.categories;\n                //If true\n                if (currentConsentCookieJSON[cookieType]) {\n                    if(category === cookieType) {\n                        //Set the src of the iframe\n                        iframe.src = iframe.dataset.src;\n                        //Remove the data-src for styling purposes\n                        iframe.removeAttribute('data-src');\n                    }\n                }\n            })\n        }\n\n    };\n\n    const cookieSettingsUpdate = ()=>{\n\n        //Get timestamp of one year into the future\n        var date = new Date();\n        date.setTime(date.getTime() + 365 * 24 * 60 * 60 * 1000);\n\n        //If the form is submitted\n        document.addEventListener('submit', function (event) {\n\n            //Let's make sure we are on the right form\n            if (!event.target.matches('#cookies_form')) return;\n\n            event.preventDefault();\n\n            let formInputs = event.target.getElementsByTagName('input')\n            let options = {\"essential\": true}\n\n            // console.log(formInputs);\n\n            for (var i = 0; i < formInputs.length; i++) {\n                var input = formInputs[i]\n                if (input.checked) {\n\n                    var name = input.name.replace('cookies-', '')\n                    var value = input.value === 'yes'\n\n                    options[name] = value\n                }\n            }\n\n            // console.log(options);\n            document.cookie = 'dgwltd_cookies_preferences_set=true; expires=' + date.toUTCString() + '; path=/';\n            document.cookie = 'dgwltd_cookies_policy=' + JSON.stringify(options) + '; expires=' + date.toUTCString() + '; path=/';\n\n            //Show confirmation message\n            let confirmationMessage = document.querySelector('.govuk-notification-banner')\n            // hide the message if already visible so assistive tech is triggered when it appears\n            confirmationMessage.style.display = 'none'\n            //Scroll to top of the page\n            document.body.scrollTop = document.documentElement.scrollTop = 0\n            //Show the message\n            confirmationMessage.style.display = 'block'\n\n\n        \n        }, false);\n\n\n    };\n\n\n    //Vanilla nav toggle button\n    const toggleNav = (button, elem, masthead)=>{\n\n        //https://piccalil.li/tutorial/build-a-light-and-global-state-system\n\n        //Set up the vars\n        const toggleButton = document.querySelector(button);\n        const menu = document.querySelector(elem);\n        const header = document.querySelector(masthead);\n\n        window.subscribers = [];\n        \n        const defaultState = {\n            status: 'closed',\n            enabled: false,\n        };\n\n        const state = new Proxy(defaultState, {\n            set(state, key, value) {\n                const oldState = {...state};\n\n                state[key] = value;\n\n                window.subscribers.forEach(callback => callback(state, oldState));\n\n                return state;\n            }\n        });\n\n        //If window resized lets watch for when we go bigger than a tablet and switch from the burger menu to a full menu\n        const observer = new ResizeObserver((observedItems) => {\n            const { contentRect } = observedItems[0];\n            // console.log(contentRect);\n            // console.log(observedItems[0]);\n            if (contentRect.width <= '769') {\n                state.enabled = true;\n                observedItems[0].target.setAttribute('enabled', state.enabled);\n              } else {\n                state.enabled = false;\n                observedItems[0].target.setAttribute('enabled', state.enabled);\n            }\n            \n        });\n\n        //Watch the header element \n        observer.observe(header);\n\n        //Now an event listener for the burger menu button\n        toggleButton.addEventListener('click', function(event) {\n\n            // The JSON.parse function helps us convert the attribute from a string to a real boolean (true/false).\n            const open = JSON.parse(toggleButton.getAttribute('aria-expanded'));\n\n            //Switch the state via aria-expanded and set a data attribute status=\"open\" which we can access with CSS\n            state.status = open ? 'closed' : 'open';\n            toggleButton.setAttribute('aria-expanded', !open);\n            menu.setAttribute('status', state.status);\n\n            //Add an additional class to the header just incase we want to do something with it in it's opened state\n            if (header) {\n                header.classList.toggle('masthead-is-open');\n            }\n\n        });\n\n        //Close menu if user hits the escape key\n        window.addEventListener('keydown', function(event) {\n\n            if (!event.key.includes('Escape')) { return; }\n            //Set aria state and our data attribute\n            toggleButton.setAttribute('aria-expanded', 'false');\n            state.status = 'closed';\n            menu.setAttribute('status', state.status);\n\n            //And remove the class if set\n            if (header) {\n                header.classList.remove('masthead-is-open');\n            }\n            \n        });\n\n    };\n\n    const blockContrast = (elem)=>{    \n\n        //Get all the blocks with background colors set\n        var backgrounds = document.querySelectorAll(elem);\n\n        //If no classes found bail\n        // console.log(backgrounds);\n        if (!backgrounds) return;\n\n        //Loop through the nodelist of backgrounds and transform the color contrast\n        Array.prototype.map.call(backgrounds, function (background) {\n\n            //Get the background color and convert to HEX\n\n            var bgColor = rgb2hex(background.style.backgroundColor);\n\n            // console.log('background color: ' + bgColor);\n\n            //Set the background color\n            background.style.color = getContrast(bgColor);\n\n        });\n    };\n\n    const cardClick = (elem)=>{  \n\n        const cardLinks = document.querySelectorAll(elem);\n\n        if (!cardLinks) return;\n\n        Array.prototype.forEach.call(cardLinks, function(card, i){\n\n            card.addEventListener(\"click\", handleClick)\n\n            // Click handler but only if text is not selected\n            function handleClick(event) {\n                const isTextSelected = window.getSelection().toString();\n                if (!isTextSelected) {\n                    window.location = card.dataset.url;\n                }\n            }\n\n        });   \n        \n    };\n\n    //Init\n    document.addEventListener(\"DOMContentLoaded\", function() {\n        // blockContrast('.has-background');\n        //cookieBanner(); // Optional\n        //cookieSettingsPage(); // Optional\n        //cookieSettingsUpdate(); // Optional\n        //cookieScriptsEnable(); // Optional\n        toggleNav('#nav-toggle', '#site-navigation', '#masthead');\n        cardClick('.dgwltd-card');\n     });\n    \n})();"],"names":["toggleNav","button","elem","masthead","toggleButton","document","querySelector","menu","header","window","subscribers","defaultState","status","enabled","state","Proxy","set","key","value","oldState","forEach","callback","observer","ResizeObserver","observedItems","contentRect","width","target","setAttribute","observe","addEventListener","event","open","JSON","parse","getAttribute","classList","toggle","includes","remove","cardClick","cardLinks","querySelectorAll","Array","prototype","call","card","i","handleClick","isTextSelected","getSelection","toString","location","dataset","url"],"mappings":"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"}